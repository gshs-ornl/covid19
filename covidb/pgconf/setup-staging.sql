
CREATE SCHEMA IF NOT EXISTS :myschema;

CREATE TABLE if not exists  :myschema.vendors (
	  vendor_id TEXT PRIMARY KEY
	, name TEXT
	, details TEXT
);

CREATE TABLE if not exists  :myschema.datasets (
	  vendor_id TEXT REFERENCES :myschema.vendors(vendor_id)
  	, dataset_id TEXT PRIMARY KEY
	, name TEXT DEFAULT 'FIXME: replace this autogenerated text'
	, details TEXT
);

CREATE TABLE if not exists  :myschema.providers (
      provider_id TEXT PRIMARY KEY
    , name TEXT DEFAULT 'FIXME: replace this autogenerated text'
    , insert_ts TIMESTAMP WITH TIME ZONE DEFAULT now()
);

CREATE TABLE if not exists  :myschema.scrapes (
      scrape_id SERIAL UNIQUE
    , provider_id TEXT REFERENCES :myschema.providers(provider_id)
	, dataset_id TEXT REFERENCES :myschema.datasets(dataset_id)
    , uri TEXT
    , scraped_ts TIMESTAMP WITH TIME ZONE
    , doc TEXT
    , csv_file TEXT -- source CSV file
    , csv_row INT -- row in the CSV file
    , PRIMARY KEY (provider_id, uri, scraped_ts)
);

CREATE TABLE if not exists  :myschema.attributes (
      attr TEXT NOT NULL PRIMARY KEY
    , dataset_id TEXT REFERENCES :myschema.datasets(dataset_id)
    , name TEXT
    , definition TEXT DEFAULT 'FIXME: replace this autogenerated text'
    , details TEXT
	, meta JSONB
);

create table  if not exists :myschema.geounits (
      geounit_id TEXT PRIMARY KEY
	, name TEXT
    , resolution TEXT -- country, state, county, etc.
    , admin_lvl INT GENERATED ALWAYS AS (CHAR_LENGTH(geounit_id) - CHAR_LENGTH(REPLACE(geounit_id, '^', ''))) STORED
    , details TEXT
    , meta JSONB
);

CREATE TABLE  if not exists :myschema.stav (
      scrape_id INT REFERENCES :myschema.scrapes(scrape_id) ON DELETE CASCADE
    , geounit_id TEXT REFERENCES :myschema.geounits(geounit_id)
    , vtime TEXT -- should be of type 'time with precision'
    , attr TEXT REFERENCES :myschema.attributes(attr)
    , val TEXT NOT NULL
    , meta JSONB -- overrides :myschema.attributes.meta if needed, used rarely
    , parser TEXT
    , csv_row INT -- this where the value comes from in the CSV file
    , csv_col TEXT
    , PRIMARY KEY (scrape_id, geounit_id, vtime, attr)
);

